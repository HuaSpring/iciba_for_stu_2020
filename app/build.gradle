apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"


    /* signingConfigs {
        platform {
            keyAlias 'spring'
            keyPassword '123456'
            storeFile file('./../springsignapkplatform.jks')
            storePassword '123456'
        }
    }*/

//    signingConfig signingConfigs.platform

    defaultConfig {
        applicationId "com.fspt.practice"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true // support svg

        multiDexEnabled true


        android.applicationVariants.all { variant ->
            variant.outputs.all {
                def fileName
                if (variant.buildType.name == "release") {
                    fileName = "WK_Practic.apk"
                } else {
                    fileName = "WK_Practic_Beta_V${defaultConfig.versionName}.apk"
                }
                outputFileName = fileName
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.platform
        }
        debug {
//            signingConfig signingConfigs.platform
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    //  ResDir
    sourceSets {
        main() {
//            res.srcDirs += "src/main/res_fan"
            res.srcDirs += "src/main/res_curtain"
            res.srcDirs += "src/main/res_practice"
//            res.srcDirs += "src/main/res_home_control"
//            res.srcDirs += "src/main/res_home_security"
        }

    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


    productFlavors {
    }

    repositories {
        flatDir {
            dirs 'libs'   // aar目录
        }
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation(name: 'nlecloudII-debug', ext: 'aar')

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.navigation:navigation-fragment:2.3.0'
    implementation 'androidx.navigation:navigation-ui:2.3.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //  Retrofit 相关 okhttp okio gson convertgson
    api 'com.squareup.retrofit2:retrofit:2.8.1'
    api 'com.squareup.retrofit2:converter-gson:2.8.1'
    api 'com.squareup.retrofit2:converter-scalars:2.8.1'
    api 'com.google.code.gson:gson:2.8.6'
//    api 'com.squareup.retrofit2:adapter-rxjava:2.5.0' // 版本略低


    // rxAndroid  https://github.com/ReactiveX/RxAndroid 两个一起用
    api 'io.reactivex.rxjava3:rxandroid:3.0.0'
    api 'io.reactivex.rxjava3:rxjava:3.0.0'
    // Adapter 也新增上
    api 'com.squareup.retrofit2:adapter-rxjava2:2.8.1'

    api 'org.jetbrains:annotations:15.0'

    // Toolbar 适用于 X 以下的版本
//    implementation 'com.android.support:appcompat-v7:28.0.0'

}

preBuild {
    doLast {
        def imlFile = file(project.name + ".iml")
        println 'Change ' + project.name + '.iml order'
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
            parsedXml.component[1].remove(jdkNode)
            def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
            new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}


// Don't Merge AndroidManifest.xml
/*android.applicationVariants.all{ variant ->
    variant.outputs.each { output ->
        output.processResources.manifestFile = file('src/main/AndroidManifest.xml')
        output.processManifest.enabled=false
    }
}*/
